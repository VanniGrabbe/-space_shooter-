
   
Neu mit Zusatzaufgabe vom 7.7.

import "dart:math" as math;

const int boundaryX = 10;
const int boundaryY = 10;

void main() {
  PlayerSpaceship player =
      PlayerSpaceship(x: 0, y: 0, speed: 2, health: 100, attack: 20, color: Color.blau);
  print("Die Farbe des Spaceship ist ${player.color.name}");
  
  player.changeColor(Color.gruen);
  print("Die Farbe des Spaceship ist ${player.color.name}");
  
  
  List<EnemySpaceship> enemies = [
    EnemySpaceship(x: 2, y: 5, speed: 1, health: 50, attack: 15, color: Color.schwarz),
    EnemySpaceship(x: -6, y: 2, speed: 2, health: 70, attack: 10, color: Color.lila),
    EnemySpaceship(x: 10, y: -10, speed: 1, health: 30, attack: 20, color: Color.gruen),
    EnemySpaceship(x: 4, y: 12, speed: 2, health: 100, attack: 5, color: Color.lila)
  ];
  
  List<RepairStation> stations = [
    RepairStation(x: 2, y: -10),
    RepairStation(x: 8, y: -2),
  ];

  List<HealthStation> healthy = [
    HealthStation(x: 2, y: 5, healPoints: 8),
    HealthStation(x: 5, y: 7, healPoints: 2),
    HealthStation(x: 3, y: 10, healPoints: 5) 
  ];
  
  bool isGameOver = false;
  int round = 1;

  while (!isGameOver) {
    print("Runde: $round");
    
    player.move();
  for (RepairStation station in stations) {
      if(station.x == player.x && station.y == player.y) {
        station.repair(player);
      }
    }
    
    for (EnemySpaceship enemy in enemies) {
      enemy.move();
      
      if(enemy.x == player.x && enemy.y == player.y) {
        print("Du triffst auf ein gegnerisches Raumschiff!");

    player.attackEnemy(enemy, player.attack);
        enemy.attackPlayer(player, enemy.attack);
        
        print("Du hast noch ${player.health} Lebenspunkte");
        print("Dein Gegner hat noch ${enemy.health} Lebenspunkte");
      }
      
      if(enemy.health <= 0) {
        print("Gegnerisches Schiff wurde zerstört!");
      } 
    }
    
    enemies = enemies.where((el) => el.health > 0).toList();
  if(player.health <= 0) {
      isGameOver = true;
      print("Du hast keine Lebenspunkte mehr. Game Over!");
    } else if(enemies.length <= 0) {
      isGameOver = true;
      print("Es sind keine Gegner mehr übrig. Du hast gewonnen!");
    }
    
    if(round >= 10000) {
      isGameOver = true;
    }
    
    round++;
  }
  var levels = {
    "Level 1": {
      "boundaryX": 10,
      "boundaryY": 10,
      "enemies": [
        EnemySpaceship(x:5, y: 10, speed: 10, health: 3, attack: 9, color: Color.blau),
        EnemySpaceship(x:-7, y: -10, speed: 19, health: 10, attack: 3, color: Color.lila),

       EnemySpaceship(x:3, y: 13, speed: 5, health: 6, attack: 5, color: Color.schwarz),
      ],
      "healthStations": [
        HealthStation(x: 3, y: 3, healPoints: 20),
        HealthStation(x: 5, y: -4, healPoints: 15),
        HealthStation(x: 7, y: 6, healPoints: 10),
      ],
    },
    "Level 2" : {
      "boundaryX": 15,
      "boundaryY": 15,
      "enemies": [
        EnemySpaceship(x:5, y: 10, speed: 10, health: 3, attack: 9, color: Color.gruen),
        EnemySpaceship(x:-7, y: -10, speed: 19, health: 10, attack: 3, color: Color.lila),
        EnemySpaceship(x:3, y: 13, speed: 5, health: 6, attack: 5, color: Color.schwarz),
      ],
      "healthStations": [
        HealthStation(x: 3, y: 3, healPoints: 8),
        HealthStation(x: 5, y: -4, healPoints: 10),
        HealthStation(x: 7, y: 6, healPoints: 20),
      ],
    },

    "Level 3" : {
      "boundaryX": 20,
      "boundaryY": 20,
      "enemies": [
        EnemySpaceship(x:5, y: 10, speed: 10, health: 3, attack: 9, color: Color.gruen),
        EnemySpaceship(x:-7, y: -10, speed: 19, health: 10, attack: 3, color: Color.lila),
        EnemySpaceship(x:3, y: 13, speed: 5, health: 6, attack: 5, color: Color.schwarz),
      ],
      "healthStations": [
        HealthStation(x: 3, y: 3, healPoints: 8),
        HealthStation(x: 5, y: -4, healPoints: 10),
        HealthStation(x: 7, y: 6, healPoints: 20),
      ],
    }
  };
  
  for(var levelName in levels.keys){
    var levelData = levels[levelName];
    print("Playing $levelName");
    var isLevelWon = playLevel(levelName, levelData);
    print("Level $levelName ${isLevelWon ? "successfully completed" : "failed"}");
  }
}

enum Direction { forward, backward, left, right }


Direction getRandomDirection() {
  int ind = math.Random().nextInt(4);
  return Direction.values[ind];
 
}
enum Color {blau, schwarz, lila, gruen}
  
abstract class Spaceship {
  int x, y, speed, health, attack;
  Color color;
  Spaceship(
      {required this.x,
      required this.y,
      required this.speed,
      required this.health,
      required this.attack,
      required this.color});

  void move() {
    Direction direction = getRandomDirection();
    switch (direction) {
      case Direction.forward:
        y += y >= boundaryY ? 0 : speed;
        break;
      case Direction.backward:
        y -= y <= -boundaryY ? 0 : speed;
        break;
      case Direction.left:
   x -= x <= -boundaryX ? 0 : speed;
        break;
      case Direction.right:
        x += x >= boundaryX ? 0 : speed;
        break;
      default:
    }
  }
    void damageSpaceship(int damage) {
    health -= damage;
  }
  void changeColor(Color newColor){
    color = newColor;
  }
}
  
class PlayerSpaceship extends Spaceship {
  PlayerSpaceship(
  {required int x,
      required int y,
      required int speed,
      required int health,
      required int attack,
      required Color color})
      : super(x: x, y: y, speed: speed, health: health, attack: attack, color: color);

    void attackEnemy(EnemySpaceship enemy, int damage) {
    enemy.damageSpaceship(damage);
  }
}

class EnemySpaceship extends Spaceship {
  EnemySpaceship(
      {required int x,
      required int y,
      required int speed,
      required int health,
      required int attack,
      required Color color})
      : super(x: x, y: y, speed: speed, health: health, attack: attack, color: color);

  void attackPlayer(PlayerSpaceship player, int damage) {
    player.damageSpaceship(damage);
  }
}
class RepairStation {
  int x, y;
  
  RepairStation({required this.x, required this.y});
  
  void repair(PlayerSpaceship spaceship) {
    print("Dein Schiff wurde vollständig repariert!");
    spaceship.health = 100;
  }
}
  
class HealthStation {
  int x;
  int y;
  int healPoints;
  
  HealthStation({required this.x, required this.y, required this.healPoints});
  
  void healPlayer(PlayerSpaceship player){
    player.health += healPoints;

   }
} 
  
typedef LevelData = Map<String, dynamic>;

bool playLevel(String levelName, LevelData levelData){
  var player = List<PlayerSpaceship>.from(levelData["player"]);
  var enemies = List<EnemySpaceship>.from(levelData["enemies"]);
  var healthy = List<HealthStation>.from(levelData["healthStaions"]);
  var boundaryX = levelData["boundaryX"];
  var boundaryY = levelData["boundaryY"];
  
  while(true){
    player.move(Direction.forward);
    
    for(var station in healthy){
      if(player.x == station.x && player.y == station.y){
        station.healPlayer(player);
      }
    }
    
  }
}



